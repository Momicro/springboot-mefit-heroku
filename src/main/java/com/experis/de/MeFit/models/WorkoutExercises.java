package com.experis.de.MeFit.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.Setter;

import javax.persistence.*;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

@Entity
@Table(name = "WorkoutExercises")
@Schema(description = "WorkoutExercises Model")
public  @Getter
@Setter
@RequiredArgsConstructor
class WorkoutExercises {

    //autogenerated ID which never has to be defined in future functions.
    @ApiModelProperty(notes = "ID of the workout exercises", name = "id", value = "1")
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long id;

    @Column(name="repetition",
            nullable = false,
            columnDefinition = "TEXT")
    private String repetition;

    @Column(name="weight",
            nullable = false,
            columnDefinition = "TEXT")
    private String weight;

    @Column(name="fitnessLevel",
            nullable = false,
            columnDefinition = "TEXT")
    private String fitnessLevel;

    //related data
    //workout - exercises - relation
    @OneToMany(cascade = {/*CascadeType.ALL, */CascadeType.PERSIST, CascadeType.MERGE, CascadeType.DETACH})
    @JoinColumn(name = "workoutExercises_id")
    public Set<Exercise> exercises = new HashSet<>();

    // restricts the output to a List of IDs of the exercises
    @JsonGetter("exercises")
    public List<String> exercises() {
        if(exercises != null) {
            return exercises.stream()
                    .map(exercise -> {
                        return "/api/v1/exercises/" + exercise.getId();
                    }).collect(Collectors.toList());
        }
        return null;
    }

    //related data
    //workoutExercises - exercises - relation
    @OneToMany(cascade = {/*CascadeType.ALL, */CascadeType.PERSIST, CascadeType.MERGE, CascadeType.DETACH})
    @JoinColumn(name = "workoutExercises_id")
    public Set<Workout> workouts = new HashSet<>();

    // restricts the output to a List of IDs of the exercises
    @JsonGetter("workouts")
    public List<String> workouts() {
        if(workouts != null) {
            return workouts.stream()
                    .map(workout -> {
                        return "/api/v1/workouts/" + workout.getId();
                    }).collect(Collectors.toList());
        }
        return null;
    }

}
