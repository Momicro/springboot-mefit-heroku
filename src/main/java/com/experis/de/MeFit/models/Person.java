package com.experis.de.MeFit.models;

import com.fasterxml.jackson.annotation.JsonGetter;

import io.swagger.annotations.ApiModelProperty;
import io.swagger.v3.oas.annotations.media.Schema;
//import lombok.Data;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.Setter;

import javax.persistence.*;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

@Entity
@Table(name = "Person")
@Schema(description = "Person Model")
public  @Getter
@Setter
@RequiredArgsConstructor
class Person {

    //autogenerated ID which never has to be defined in future functions.
    @ApiModelProperty(notes = "ID of the person", name = "id", value = "1" )
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long id;

    //Here the static components of the model
    @Column(name="firstName",
            nullable = false,
            columnDefinition = "TEXT")
    private String firstName;

    @Column(name="lastName",
            nullable = false,
            columnDefinition = "TEXT")
    private String lastName;

    @Column(name="email",
            nullable = false,
            columnDefinition = "TEXT")
    private String email;

    @Column(name="password",
            nullable = false,
            columnDefinition = "TEXT")
    private String password;

    @Lob
    private byte[] picture;

    //related data
    //Person - role - relation
    @OneToMany
    @JoinColumn(name = "person_id" )
    private Set<Role> roles = new HashSet<>();

    // restricts the output to a List of IDs of the roles
    @JsonGetter("roles")
    public List<String> roles() {
        if(roles != null) {
            return roles.stream()
                    .map(role -> {
                        return "/api/v1/roles/" + role.getId();
                    }).collect(Collectors.toList());
        }
        return null;
    }
}
