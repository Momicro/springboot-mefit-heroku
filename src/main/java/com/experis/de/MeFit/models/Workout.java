package com.experis.de.MeFit.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.v3.oas.annotations.media.Schema;
//import lombok.Data;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.Setter;

import javax.persistence.*;
//import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

@Entity
@Table(name = "Workout")
@Schema(description = "Workout Model")
public  @Getter
        @Setter
        @RequiredArgsConstructor
        class Workout {

    //autogenerated ID which never has to be defined in future functions.
    @ApiModelProperty(notes = "ID of the workout", name = "id", value = "1")
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long id;

    //Here the static components of the model
    @Column(name="name",
            nullable = false,
            columnDefinition = "TEXT")
    private String name;

    @Column(name="type",
            nullable = false,
            columnDefinition = "TEXT")
    private String type;

    //related data
    //programs - workouts -binding
    @ManyToMany(cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.DETACH})
    @JoinTable(
            name="workout_programs",
            joinColumns = {@JoinColumn(name="workout_id")},
            inverseJoinColumns = {@JoinColumn(name="program_id")}
    )
    private Set<Program> programs = new HashSet<>();

    //to regulate the output only a List of the programIDs will be returned
    @JsonGetter("programs")
    public List<String> programsGetter() {
        if(programs != null){
            return programs.stream()
                    .map(program -> {
                        return "/api/v1/programs/" + program.getId();
                    }).collect(Collectors.toList());
        }
        return null;
    }

    //related data
    //exercise - workouts - relation
    @ApiModelProperty(notes = "List of exercise IDs in workout", name = "List of exercise IDs")
    @ManyToMany(cascade = {/*CascadeType.ALL, */CascadeType.PERSIST, CascadeType.MERGE, CascadeType.DETACH}, mappedBy = "workouts")
    public Set<Exercise> exercises= new HashSet<>();

    //restricts the output to a List of exercise IDs
    @JsonGetter("exercise")
    public List<String> exercises() {
        return exercises.stream()
                .map(exercise -> {
                    return "/api/v1/exercises/" + exercise.getId();
                }).collect(Collectors.toList());
    }

}
